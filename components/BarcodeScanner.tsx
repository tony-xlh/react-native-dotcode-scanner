import React, {useEffect, useRef} from 'react';
import {CameraEnhancer, CameraView, CaptureVisionRouter, DecodedBarcodesResult, EnumPresetTemplate} from 'dynamsoft-capture-vision-react-native';
import { StyleSheet } from 'react-native';

export function BarcodeScanner() {
  const cameraView = useRef<CameraView>(null); // Create a reference to the CameraView component using useRef.
  const camera = CameraEnhancer.getInstance(); //Get the singleton instance of CameraEnhancer
  const router = CaptureVisionRouter.getInstance(); //Get the singleton instance of CaptureVisionRouter

  useEffect(() => {
    router.setInput(camera); //Bind the CaptureVisionRouter and ImageSourceAdapter before router.startCapturing()
    camera.setCameraView(cameraView.current!!); //Bind the CameraEnhancer and CameraView before camera.open()

    /**
     * Adds a CapturedResultReceiver object to listen the captured result.
     * In this sample, we only listen DecodedBarcodesResult generated by Dynamsoft Barcode Reader module.
     * */
    let resultReceiver = router.addResultReceiver({
      onDecodedBarcodesReceived: (result: DecodedBarcodesResult) =>  {
        console.log('scanned');
        if (result.items && result.items.length > 0) {
          console.log(result.items[0].text);
        }
      },
    });

    /**
     * Open the camera when the component is mounted.
     * Please remember to request camera permission before it.
     * */
    camera.open();

    /**
     * Start capturing when the component is mounted.
     * In this sample, we start capturing by using `readSingleBarcode` template.
     * You can also try other Preset-Template in EnumPresetTemplate.
     * */
    router.startCapturing(EnumPresetTemplate.PT_READ_SINGLE_BARCODE);

    return () => {
      //Remove the receiver when the component is unmounted.
      router.removeResultReceiver(resultReceiver);

      //Close the camera when the component is unmounted.
      camera.close();

      //Stop capturing when the component is unmounted.
      router.stopCapturing();
    };
  }, [camera, router, cameraView]);

  return (
    <CameraView style={styles.container} ref={cameraView}>
    {/* you can add your own view here as the children view of CameraView */}
    </CameraView>
  );
}
const styles = StyleSheet.create({
  container: {
    flex:1,
  },
});
